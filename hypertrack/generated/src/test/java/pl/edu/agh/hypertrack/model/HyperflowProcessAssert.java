package pl.edu.agh.hypertrack.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link HyperflowProcess} specific assertions - Generated by CustomAssertionGenerator.
 */
public class HyperflowProcessAssert extends AbstractAssert<HyperflowProcessAssert, HyperflowProcess> {

  /**
   * Creates a new <code>{@link HyperflowProcessAssert}</code> to make assertions on actual HyperflowProcess.
   * @param actual the HyperflowProcess we want to make assertions on.
   */
  public HyperflowProcessAssert(HyperflowProcess actual) {
    super(actual, HyperflowProcessAssert.class);
  }

  /**
   * An entry point for HyperflowProcessAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myHyperflowProcess)</code> and get specific assertion with code completion.
   * @param actual the HyperflowProcess we want to make assertions on.
   * @return a new <code>{@link HyperflowProcessAssert}</code>
   */
  public static HyperflowProcessAssert assertThat(HyperflowProcess actual) {
    return new HyperflowProcessAssert(actual);
  }

  /**
   * Verifies that the actual HyperflowProcess's inputSignals contains the given HyperflowInputSignal elements.
   * @param inputSignals the given elements that should be contained in actual HyperflowProcess's inputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowProcess's inputSignals does not contain all given HyperflowInputSignal elements.
   */
  public HyperflowProcessAssert hasInputSignals(HyperflowInputSignal... inputSignals) {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowInputSignal varargs is not null.
    if (inputSignals == null) failWithMessage("Expecting inputSignals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getInputSignals(), inputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowProcess's inputSignals contains <b>only<b> the given HyperflowInputSignal elements and nothing else in whatever order.
   * @param inputSignals the given elements that should be contained in actual HyperflowProcess's inputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowProcess's inputSignals does not contain all given HyperflowInputSignal elements.
   */
  public HyperflowProcessAssert hasOnlyInputSignals(HyperflowInputSignal... inputSignals) {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowInputSignal varargs is not null.
    if (inputSignals == null) failWithMessage("Expecting inputSignals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getInputSignals(), inputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowProcess's inputSignals does not contain the given HyperflowInputSignal elements.
   *
   * @param inputSignals the given elements that should not be in actual HyperflowProcess's inputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowProcess's inputSignals contains any given HyperflowInputSignal elements.
   */
  public HyperflowProcessAssert doesNotHaveInputSignals(HyperflowInputSignal... inputSignals) {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowInputSignal varargs is not null.
    if (inputSignals == null) failWithMessage("Expecting inputSignals parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getInputSignals(), inputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowProcess has no inputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowProcess's inputSignals is not empty.
   */
  public HyperflowProcessAssert hasNoInputSignals() {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have inputSignals but had :\n  <%s>";
    
    // check
    if (actual.getInputSignals().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getInputSignals());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual HyperflowProcess's key is equal to the given one.
   * @param key the given key to compare the actual HyperflowProcess's key to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowProcess's key is not equal to the given one.
   */
  public HyperflowProcessAssert hasKey(HypertrackEntityUniqueKey key) {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting key of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HypertrackEntityUniqueKey actualKey = actual.getKey();
    if (!Objects.areEqual(actualKey, key)) {
      failWithMessage(assertjErrorMessage, actual, key, actualKey);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowProcess's outputSignals contains the given HyperflowOutputSignal elements.
   * @param outputSignals the given elements that should be contained in actual HyperflowProcess's outputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowProcess's outputSignals does not contain all given HyperflowOutputSignal elements.
   */
  public HyperflowProcessAssert hasOutputSignals(HyperflowOutputSignal... outputSignals) {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowOutputSignal varargs is not null.
    if (outputSignals == null) failWithMessage("Expecting outputSignals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getOutputSignals(), outputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowProcess's outputSignals contains <b>only<b> the given HyperflowOutputSignal elements and nothing else in whatever order.
   * @param outputSignals the given elements that should be contained in actual HyperflowProcess's outputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowProcess's outputSignals does not contain all given HyperflowOutputSignal elements.
   */
  public HyperflowProcessAssert hasOnlyOutputSignals(HyperflowOutputSignal... outputSignals) {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowOutputSignal varargs is not null.
    if (outputSignals == null) failWithMessage("Expecting outputSignals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getOutputSignals(), outputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowProcess's outputSignals does not contain the given HyperflowOutputSignal elements.
   *
   * @param outputSignals the given elements that should not be in actual HyperflowProcess's outputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowProcess's outputSignals contains any given HyperflowOutputSignal elements.
   */
  public HyperflowProcessAssert doesNotHaveOutputSignals(HyperflowOutputSignal... outputSignals) {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowOutputSignal varargs is not null.
    if (outputSignals == null) failWithMessage("Expecting outputSignals parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getOutputSignals(), outputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowProcess has no outputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowProcess's outputSignals is not empty.
   */
  public HyperflowProcessAssert hasNoOutputSignals() {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have outputSignals but had :\n  <%s>";
    
    // check
    if (actual.getOutputSignals().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getOutputSignals());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual HyperflowProcess's processType is equal to the given one.
   * @param processType the given processType to compare the actual HyperflowProcess's processType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowProcess's processType is not equal to the given one.
   */
  public HyperflowProcessAssert hasProcessType(HyperflowProcessType processType) {
    // check that actual HyperflowProcess we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting processType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HyperflowProcessType actualProcessType = actual.getProcessType();
    if (!Objects.areEqual(actualProcessType, processType)) {
      failWithMessage(assertjErrorMessage, actual, processType, actualProcessType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
