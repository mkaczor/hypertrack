package pl.edu.agh.hypertrack.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link HyperflowOutputSignal} specific assertions - Generated by CustomAssertionGenerator.
 */
public class HyperflowOutputSignalAssert extends AbstractAssert<HyperflowOutputSignalAssert, HyperflowOutputSignal> {

  /**
   * Creates a new <code>{@link HyperflowOutputSignalAssert}</code> to make assertions on actual HyperflowOutputSignal.
   * @param actual the HyperflowOutputSignal we want to make assertions on.
   */
  public HyperflowOutputSignalAssert(HyperflowOutputSignal actual) {
    super(actual, HyperflowOutputSignalAssert.class);
  }

  /**
   * An entry point for HyperflowOutputSignalAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myHyperflowOutputSignal)</code> and get specific assertion with code completion.
   * @param actual the HyperflowOutputSignal we want to make assertions on.
   * @return a new <code>{@link HyperflowOutputSignalAssert}</code>
   */
  public static HyperflowOutputSignalAssert assertThat(HyperflowOutputSignal actual) {
    return new HyperflowOutputSignalAssert(actual);
  }

  /**
   * Verifies that the actual HyperflowOutputSignal's key is equal to the given one.
   * @param key the given key to compare the actual HyperflowOutputSignal's key to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowOutputSignal's key is not equal to the given one.
   */
  public HyperflowOutputSignalAssert hasKey(HypertrackEntityUniqueKey key) {
    // check that actual HyperflowOutputSignal we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting key of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HypertrackEntityUniqueKey actualKey = actual.getKey();
    if (!Objects.areEqual(actualKey, key)) {
      failWithMessage(assertjErrorMessage, actual, key, actualKey);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowOutputSignal's source is equal to the given one.
   * @param source the given source to compare the actual HyperflowOutputSignal's source to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowOutputSignal's source is not equal to the given one.
   */
  public HyperflowOutputSignalAssert hasSource(HyperflowProcess source) {
    // check that actual HyperflowOutputSignal we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting source of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HyperflowProcess actualSource = actual.getSource();
    if (!Objects.areEqual(actualSource, source)) {
      failWithMessage(assertjErrorMessage, actual, source, actualSource);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowOutputSignal's target contains the given HyperflowInputSignal elements.
   * @param target the given elements that should be contained in actual HyperflowOutputSignal's target.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowOutputSignal's target does not contain all given HyperflowInputSignal elements.
   */
  public HyperflowOutputSignalAssert hasTarget(HyperflowInputSignal... target) {
    // check that actual HyperflowOutputSignal we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowInputSignal varargs is not null.
    if (target == null) failWithMessage("Expecting target parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTarget(), target);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowOutputSignal's target contains <b>only<b> the given HyperflowInputSignal elements and nothing else in whatever order.
   * @param target the given elements that should be contained in actual HyperflowOutputSignal's target.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowOutputSignal's target does not contain all given HyperflowInputSignal elements.
   */
  public HyperflowOutputSignalAssert hasOnlyTarget(HyperflowInputSignal... target) {
    // check that actual HyperflowOutputSignal we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowInputSignal varargs is not null.
    if (target == null) failWithMessage("Expecting target parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTarget(), target);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowOutputSignal's target does not contain the given HyperflowInputSignal elements.
   *
   * @param target the given elements that should not be in actual HyperflowOutputSignal's target.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowOutputSignal's target contains any given HyperflowInputSignal elements.
   */
  public HyperflowOutputSignalAssert doesNotHaveTarget(HyperflowInputSignal... target) {
    // check that actual HyperflowOutputSignal we want to make assertions on is not null.
    isNotNull();

    // check that given HyperflowInputSignal varargs is not null.
    if (target == null) failWithMessage("Expecting target parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTarget(), target);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowOutputSignal has no target.
   * @return this assertion object.
   * @throws AssertionError if the actual HyperflowOutputSignal's target is not empty.
   */
  public HyperflowOutputSignalAssert hasNoTarget() {
    // check that actual HyperflowOutputSignal we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have target but had :\n  <%s>";
    
    // check
    if (actual.getTarget().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTarget());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
