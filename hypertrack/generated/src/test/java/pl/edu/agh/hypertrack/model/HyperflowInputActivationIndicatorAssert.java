package pl.edu.agh.hypertrack.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link HyperflowInputActivationIndicator} specific assertions - Generated by CustomAssertionGenerator.
 */
public class HyperflowInputActivationIndicatorAssert extends AbstractAssert<HyperflowInputActivationIndicatorAssert, HyperflowInputActivationIndicator> {

  /**
   * Creates a new <code>{@link HyperflowInputActivationIndicatorAssert}</code> to make assertions on actual HyperflowInputActivationIndicator.
   * @param actual the HyperflowInputActivationIndicator we want to make assertions on.
   */
  public HyperflowInputActivationIndicatorAssert(HyperflowInputActivationIndicator actual) {
    super(actual, HyperflowInputActivationIndicatorAssert.class);
  }

  /**
   * An entry point for HyperflowInputActivationIndicatorAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myHyperflowInputActivationIndicator)</code> and get specific assertion with code completion.
   * @param actual the HyperflowInputActivationIndicator we want to make assertions on.
   * @return a new <code>{@link HyperflowInputActivationIndicatorAssert}</code>
   */
  public static HyperflowInputActivationIndicatorAssert assertThat(HyperflowInputActivationIndicator actual) {
    return new HyperflowInputActivationIndicatorAssert(actual);
  }

  /**
   * Verifies that the actual HyperflowInputActivationIndicator's instancesToActivate is equal to the given one.
   * @param instancesToActivate the given instancesToActivate to compare the actual HyperflowInputActivationIndicator's instancesToActivate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowInputActivationIndicator's instancesToActivate is not equal to the given one.
   */
  public HyperflowInputActivationIndicatorAssert hasInstancesToActivate(Integer instancesToActivate) {
    // check that actual HyperflowInputActivationIndicator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting instancesToActivate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Integer actualInstancesToActivate = actual.getInstancesToActivate();
    if (!Objects.areEqual(actualInstancesToActivate, instancesToActivate)) {
      failWithMessage(assertjErrorMessage, actual, instancesToActivate, actualInstancesToActivate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowInputActivationIndicator's signalToCount is equal to the given one.
   * @param signalToCount the given signalToCount to compare the actual HyperflowInputActivationIndicator's signalToCount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowInputActivationIndicator's signalToCount is not equal to the given one.
   */
  public HyperflowInputActivationIndicatorAssert hasSignalToCount(HyperflowOutputSignal signalToCount) {
    // check that actual HyperflowInputActivationIndicator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting signalToCount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HyperflowOutputSignal actualSignalToCount = actual.getSignalToCount();
    if (!Objects.areEqual(actualSignalToCount, signalToCount)) {
      failWithMessage(assertjErrorMessage, actual, signalToCount, actualSignalToCount);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowInputActivationIndicator's signalToCountName is equal to the given one.
   * @param signalToCountName the given signalToCountName to compare the actual HyperflowInputActivationIndicator's signalToCountName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowInputActivationIndicator's signalToCountName is not equal to the given one.
   */
  public HyperflowInputActivationIndicatorAssert hasSignalToCountName(String signalToCountName) {
    // check that actual HyperflowInputActivationIndicator we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting signalToCountName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualSignalToCountName = actual.getSignalToCountName();
    if (!Objects.areEqual(actualSignalToCountName, signalToCountName)) {
      failWithMessage(assertjErrorMessage, actual, signalToCountName, actualSignalToCountName);
    }

    // return the current assertion for method chaining
    return this;
  }

}
