package pl.edu.agh.hypertrack.model;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link HyperflowInputSignal} specific assertions - Generated by CustomAssertionGenerator.
 */
public class HyperflowInputSignalAssert extends AbstractAssert<HyperflowInputSignalAssert, HyperflowInputSignal> {

  /**
   * Creates a new <code>{@link HyperflowInputSignalAssert}</code> to make assertions on actual HyperflowInputSignal.
   * @param actual the HyperflowInputSignal we want to make assertions on.
   */
  public HyperflowInputSignalAssert(HyperflowInputSignal actual) {
    super(actual, HyperflowInputSignalAssert.class);
  }

  /**
   * An entry point for HyperflowInputSignalAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myHyperflowInputSignal)</code> and get specific assertion with code completion.
   * @param actual the HyperflowInputSignal we want to make assertions on.
   * @return a new <code>{@link HyperflowInputSignalAssert}</code>
   */
  public static HyperflowInputSignalAssert assertThat(HyperflowInputSignal actual) {
    return new HyperflowInputSignalAssert(actual);
  }

  /**
   * Verifies that the actual HyperflowInputSignal's activationIndicator is equal to the given one.
   * @param activationIndicator the given activationIndicator to compare the actual HyperflowInputSignal's activationIndicator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowInputSignal's activationIndicator is not equal to the given one.
   */
  public HyperflowInputSignalAssert hasActivationIndicator(HyperflowInputActivationIndicator activationIndicator) {
    // check that actual HyperflowInputSignal we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting activationIndicator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HyperflowInputActivationIndicator actualActivationIndicator = actual.getActivationIndicator();
    if (!Objects.areEqual(actualActivationIndicator, activationIndicator)) {
      failWithMessage(assertjErrorMessage, actual, activationIndicator, actualActivationIndicator);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowInputSignal's key is equal to the given one.
   * @param key the given key to compare the actual HyperflowInputSignal's key to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowInputSignal's key is not equal to the given one.
   */
  public HyperflowInputSignalAssert hasKey(HypertrackEntityKey key) {
    // check that actual HyperflowInputSignal we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting key of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HypertrackEntityKey actualKey = actual.getKey();
    if (!Objects.areEqual(actualKey, key)) {
      failWithMessage(assertjErrorMessage, actual, key, actualKey);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowInputSignal's source is equal to the given one.
   * @param source the given source to compare the actual HyperflowInputSignal's source to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowInputSignal's source is not equal to the given one.
   */
  public HyperflowInputSignalAssert hasSource(HyperflowOutputSignal source) {
    // check that actual HyperflowInputSignal we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting source of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HyperflowOutputSignal actualSource = actual.getSource();
    if (!Objects.areEqual(actualSource, source)) {
      failWithMessage(assertjErrorMessage, actual, source, actualSource);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual HyperflowInputSignal's target is equal to the given one.
   * @param target the given target to compare the actual HyperflowInputSignal's target to.
   * @return this assertion object.
   * @throws AssertionError - if the actual HyperflowInputSignal's target is not equal to the given one.
   */
  public HyperflowInputSignalAssert hasTarget(HyperflowProcess target) {
    // check that actual HyperflowInputSignal we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting target of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    HyperflowProcess actualTarget = actual.getTarget();
    if (!Objects.areEqual(actualTarget, target)) {
      failWithMessage(assertjErrorMessage, actual, target, actualTarget);
    }

    // return the current assertion for method chaining
    return this;
  }

}
