package pl.edu.agh.hypertrack.io;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * {@link JsonWorkflow} specific assertions - Generated by CustomAssertionGenerator.
 */
public class JsonWorkflowAssert extends AbstractAssert<JsonWorkflowAssert, JsonWorkflow> {

  /**
   * Creates a new <code>{@link JsonWorkflowAssert}</code> to make assertions on actual JsonWorkflow.
   * @param actual the JsonWorkflow we want to make assertions on.
   */
  public JsonWorkflowAssert(JsonWorkflow actual) {
    super(actual, JsonWorkflowAssert.class);
  }

  /**
   * An entry point for JsonWorkflowAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myJsonWorkflow)</code> and get specific assertion with code completion.
   * @param actual the JsonWorkflow we want to make assertions on.
   * @return a new <code>{@link JsonWorkflowAssert}</code>
   */
  public static JsonWorkflowAssert assertThat(JsonWorkflow actual) {
    return new JsonWorkflowAssert(actual);
  }

  /**
   * Verifies that the actual JsonWorkflow's inputSignals contains the given String elements.
   * @param inputSignals the given elements that should be contained in actual JsonWorkflow's inputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's inputSignals does not contain all given String elements.
   */
  public JsonWorkflowAssert hasInputSignals(String... inputSignals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (inputSignals == null) failWithMessage("Expecting inputSignals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getInputSignals(), inputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow's inputSignals contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param inputSignals the given elements that should be contained in actual JsonWorkflow's inputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's inputSignals does not contain all given String elements.
   */
  public JsonWorkflowAssert hasOnlyInputSignals(String... inputSignals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (inputSignals == null) failWithMessage("Expecting inputSignals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getInputSignals(), inputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow's inputSignals does not contain the given String elements.
   *
   * @param inputSignals the given elements that should not be in actual JsonWorkflow's inputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's inputSignals contains any given String elements.
   */
  public JsonWorkflowAssert doesNotHaveInputSignals(String... inputSignals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (inputSignals == null) failWithMessage("Expecting inputSignals parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getInputSignals(), inputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow has no inputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's inputSignals is not empty.
   */
  public JsonWorkflowAssert hasNoInputSignals() {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have inputSignals but had :\n  <%s>";
    
    // check
    if (actual.getInputSignals().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getInputSignals());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual JsonWorkflow's outputSignals contains the given String elements.
   * @param outputSignals the given elements that should be contained in actual JsonWorkflow's outputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's outputSignals does not contain all given String elements.
   */
  public JsonWorkflowAssert hasOutputSignals(String... outputSignals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (outputSignals == null) failWithMessage("Expecting outputSignals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getOutputSignals(), outputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow's outputSignals contains <b>only<b> the given String elements and nothing else in whatever order.
   * @param outputSignals the given elements that should be contained in actual JsonWorkflow's outputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's outputSignals does not contain all given String elements.
   */
  public JsonWorkflowAssert hasOnlyOutputSignals(String... outputSignals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (outputSignals == null) failWithMessage("Expecting outputSignals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getOutputSignals(), outputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow's outputSignals does not contain the given String elements.
   *
   * @param outputSignals the given elements that should not be in actual JsonWorkflow's outputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's outputSignals contains any given String elements.
   */
  public JsonWorkflowAssert doesNotHaveOutputSignals(String... outputSignals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (outputSignals == null) failWithMessage("Expecting outputSignals parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getOutputSignals(), outputSignals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow has no outputSignals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's outputSignals is not empty.
   */
  public JsonWorkflowAssert hasNoOutputSignals() {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have outputSignals but had :\n  <%s>";
    
    // check
    if (actual.getOutputSignals().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getOutputSignals());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual JsonWorkflow's processes contains the given JsonProcess elements.
   * @param processes the given elements that should be contained in actual JsonWorkflow's processes.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's processes does not contain all given JsonProcess elements.
   */
  public JsonWorkflowAssert hasProcesses(JsonProcess... processes) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given JsonProcess varargs is not null.
    if (processes == null) failWithMessage("Expecting processes parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getProcesses(), processes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow's processes contains <b>only<b> the given JsonProcess elements and nothing else in whatever order.
   * @param processes the given elements that should be contained in actual JsonWorkflow's processes.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's processes does not contain all given JsonProcess elements.
   */
  public JsonWorkflowAssert hasOnlyProcesses(JsonProcess... processes) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given JsonProcess varargs is not null.
    if (processes == null) failWithMessage("Expecting processes parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getProcesses(), processes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow's processes does not contain the given JsonProcess elements.
   *
   * @param processes the given elements that should not be in actual JsonWorkflow's processes.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's processes contains any given JsonProcess elements.
   */
  public JsonWorkflowAssert doesNotHaveProcesses(JsonProcess... processes) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given JsonProcess varargs is not null.
    if (processes == null) failWithMessage("Expecting processes parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getProcesses(), processes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow has no processes.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's processes is not empty.
   */
  public JsonWorkflowAssert hasNoProcesses() {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have processes but had :\n  <%s>";
    
    // check
    if (actual.getProcesses().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getProcesses());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual JsonWorkflow's signals contains the given JsonSignal elements.
   * @param signals the given elements that should be contained in actual JsonWorkflow's signals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's signals does not contain all given JsonSignal elements.
   */
  public JsonWorkflowAssert hasSignals(JsonSignal... signals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given JsonSignal varargs is not null.
    if (signals == null) failWithMessage("Expecting signals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getSignals(), signals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow's signals contains <b>only<b> the given JsonSignal elements and nothing else in whatever order.
   * @param signals the given elements that should be contained in actual JsonWorkflow's signals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's signals does not contain all given JsonSignal elements.
   */
  public JsonWorkflowAssert hasOnlySignals(JsonSignal... signals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given JsonSignal varargs is not null.
    if (signals == null) failWithMessage("Expecting signals parameter not to be null.");
    
    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getSignals(), signals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow's signals does not contain the given JsonSignal elements.
   *
   * @param signals the given elements that should not be in actual JsonWorkflow's signals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's signals contains any given JsonSignal elements.
   */
  public JsonWorkflowAssert doesNotHaveSignals(JsonSignal... signals) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // check that given JsonSignal varargs is not null.
    if (signals == null) failWithMessage("Expecting signals parameter not to be null.");
    
    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getSignals(), signals);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JsonWorkflow has no signals.
   * @return this assertion object.
   * @throws AssertionError if the actual JsonWorkflow's signals is not empty.
   */
  public JsonWorkflowAssert hasNoSignals() {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have signals but had :\n  <%s>";
    
    // check
    if (actual.getSignals().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getSignals());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual JsonWorkflow's workflowName is equal to the given one.
   * @param workflowName the given workflowName to compare the actual JsonWorkflow's workflowName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JsonWorkflow's workflowName is not equal to the given one.
   */
  public JsonWorkflowAssert hasWorkflowName(String workflowName) {
    // check that actual JsonWorkflow we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting workflowName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualWorkflowName = actual.getWorkflowName();
    if (!Objects.areEqual(actualWorkflowName, workflowName)) {
      failWithMessage(assertjErrorMessage, actual, workflowName, actualWorkflowName);
    }

    // return the current assertion for method chaining
    return this;
  }

}
